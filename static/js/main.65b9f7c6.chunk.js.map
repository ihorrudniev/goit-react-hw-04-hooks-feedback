{"version":3,"sources":["components/Statistics/Statistics.js","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","App.js","reportWebVitals.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","defaultProps","Section","props","title","children","FeedbackOptions","options","onLeaveFeedback","className","style","item","map","el","type","name","onClick","list","App","useState","setGood","setNeutral","setBad","countTotalFeedback","target","prevState","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uOAGA,SAASA,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,mCACGD,EAAQ,EACP,+BACE,6BACE,uCACQ,+BAAOH,SAGjB,6BACE,0CACW,+BAAOC,SAGpB,6BACE,sCACO,+BAAOC,SAGhB,wCACS,+BAAOC,OAEhB,oDACqB,iCAAOC,EAAP,cAIvB,oDAMRL,EAAWM,aAAe,CACxBL,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAUPL,QClCAO,MAff,SAAiBC,GACf,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACf,OACE,qCACE,6BAAKD,IACJC,M,gBCLQ,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,oBAAIC,UAAWC,IAAMC,KAArB,SACGJ,EAAQK,KAAI,SAAAC,GAAE,OACb,6BACE,wBACEC,KAAK,SACLC,KAAMF,EACNG,QAASR,EACTC,UAAWC,IAAMO,KAJnB,SAMGJ,KAPIA,QCAF,SAASK,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOtB,EAAP,KAAgBwB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOrB,EAAP,KAAYwB,EAAZ,KAuBMC,EAAqB,WACzB,OAAO3B,EAAOC,EAAUC,GAO1B,OACE,qCACE,cAAC,EAAD,CAASM,MAAM,wBAAf,SACE,cAACE,EAAD,CAAiBC,QAhCP,CAAC,OAAQ,UAAW,OAgCKC,gBA9BrB,SAAC,GACnB,OADkC,EAAbgB,OACNT,MACb,IAAK,OACHK,GAAQ,SAAAK,GAAS,OAAIA,EAAY,KACjC,MAEF,IAAK,UACHJ,GAAW,SAAAI,GAAS,OAAIA,EAAY,KACpC,MAEF,IAAK,MACHH,GAAO,SAAAG,GAAS,OAAIA,EAAY,KAChC,MAEF,QACE,aAiBF,cAAC,EAAD,CAASrB,MAAM,aAAf,SACE,cAAC,EAAD,CACER,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOwB,IACPvB,mBAdC0B,SAAU9B,EAAO2B,IAAwB,YCtCpD,IAYeI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACpB,EAAD,MAEFqB,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,eAAiB,wCAAwC,KAAO,8BAA8B,KAAO,iC","file":"static/js/main.65b9f7c6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      {total > 0 ? (\n        <ul>\n          <li>\n            <p>\n              Good: <span>{good}</span>\n            </p>\n          </li>\n          <li>\n            <p>\n              Neutral: <span>{neutral}</span>\n            </p>\n          </li>\n          <li>\n            <p>\n              Bad: <span>{bad}</span>\n            </p>\n          </li>\n          <p>\n            Total: <span>{total}</span>\n          </p>\n          <p>\n            Positive Feedback: <span>{positivePercentage} %</span>\n          </p>\n        </ul>\n      ) : (\n        <p>No feedback given</p>\n      )}\n    </>\n  );\n}\n\nStatistics.defaultProps = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n  total: 0,\n  positivePercentage: 0,\n};\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Section(props) {\n  const { title, children } = props;\n  return (\n    <>\n      <h1>{title}</h1>\n      {children}\n    </>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport style from './FeedbackOptions.module.css';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <ul className={style.item}>\n      {options.map(el => (\n        <li key={el}>\n          <button\n            type=\"button\"\n            name={el}\n            onClick={onLeaveFeedback}\n            className={style.list}\n          >\n            {el}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","// import React, { Component } from 'react';\n\nimport { useState } from 'react';\nimport Statistics from './components/Statistics';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const options = ['good', 'neutral', 'bad'];\n\n  const handleCount = ({ target }) => {\n    switch (target.name) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return parseInt((good / countTotalFeedback()) * 100);\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={handleCount} />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsList\":\"FeedbackOptions_statisticsList__20BkX\",\"list\":\"FeedbackOptions_list__1iXK2\",\"item\":\"FeedbackOptions_item__cmrhD\"};"],"sourceRoot":""}